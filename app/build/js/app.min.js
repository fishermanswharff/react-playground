var LoginForm = React.createClass({displayName: "LoginForm",
  firebaseRef: new Firebase('https://jwtodoapp.firebaseio.com'),
  getInitialState() {
    return { email: '', password: '' };
  },
  componentDidMount() {
    this.authState();
  },
  onEmailStateChange(e) {
    this.setState({email: e.target.value});
  },
  onPasswordStateChange(e) {
    this.setState({password: e.target.value});
  },
  handleSubmit(e){
    e.preventDefault();
    var _this = this;
    return this.firebaseRef.authWithPassword({
      email: this.state.email,
      password: this.state.password
    }, function(error, authData) {
      if (error) {
        console.log("Login Failed!", error);
      } else {
        _this.setState({email: '', password: '', auth: _this.authState()});
      }
    });
  },
  authState() {
    this.setState({authData: this.firebaseRef.getAuth()});
  },
  unAuth(e) {
    e.preventDefault();
    this.firebaseRef.unauth();
    return this.authState();
  },
  render() {
    var authForm;
    if(this.state.authData){
      authForm = React.createElement("a", {onClick: this.unAuth}, "Logout")
    } else {
      authForm = React.createElement("form", {onSubmit: this.handleSubmit}, 
        React.createElement("h3", null, "Login"), 
        React.createElement("label", {htmlFor: "email"}, "Email: ", React.createElement("input", {type: "email", id: "email", onChange: this.onEmailStateChange, value: this.state.email})), 
        React.createElement("label", {htmlFor: "password"}, "Password: ", React.createElement("input", {type: "password", id: "password", onChange: this.onPasswordStateChange, value: this.state.password})), 
        React.createElement("button", {type: "submit"}, "Submit")
      )
    }
    return authForm;
  }
});

var TodoApp = React.createClass({displayName: "TodoApp",
  mixins: [ReactFireMixin],
  firebaseRef: new Firebase('https://jwtodoapp.firebaseio.com/projects/'),
  loadListsFromServer(){
    this.items = [];
    this.firebaseRef.on('child_added', function(dataSnapshot) {
      this.items.push(dataSnapshot.val());
      this.setState({ items: this.items });
    }.bind(this));
  },
  getInitialState() {
    return { items: [], name: '' };
  },
  onChange(e) {
    this.setState({ name: e.target.value });
  },
  handleSubmit(e) {
    e.preventDefault();
    this.firebaseRef.push({
      name: this.state.name,
      timestamp: Date.now()
    });
    this.setState({ name: '' });
  },
  componentDidMount(){
    this.loadListsFromServer();
    this.bindAsArray(this.firebaseRef, 'items');
  },
  componentWillUnmount() {},
  render() {
    return (
      React.createElement("div", null, 
        React.createElement(LoginForm, null), 
        React.createElement(TodoList, {items: this.state.items}), 
        React.createElement("form", {onSubmit: this.handleSubmit}, 
          React.createElement("input", {onChange: this.onChange, value: this.state.name}), 
          React.createElement("button", null, 'Add #' + (this.state.items.length + 1))
        )
      )
    );
  }
});

var TodoItem = React.createClass({displayName: "TodoItem",
  render: function() {
    return React.createElement("li", null, this.props.data.name);
  }
});

var TodoList = React.createClass({displayName: "TodoList",
  render: function() {
    var createItem = function(item) {
      return React.createElement(TodoItem, {key: item.id, data: item})
    };
    return React.createElement("ul", null, this.props.items.map(createItem));
  }
});

ReactDOM.render(React.createElement(TodoApp, null), document.getElementById('todo-list'));
